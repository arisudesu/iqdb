#!/usr/bin/perl

use warnings;
use strict;
use File::Find;

#system("renice 15 $$");
my $tag = shift or die "Give server tag on command line.\n";
our $dbid;
do "/usr/src/packages/sim/$tag.cfg" and $dbid or die "Can't get dbid: $!\n";
chdir "$ENV{HOME}/doujin/$tag" or die "Can't chdir: $!\n";
my $db_file = "$ENV{HOME}/stuff/$tag.idb";
open my $upd, "/usr/src/packages/sim/$tag.upd" or die "Can't read $tag.upd: $!\n";

my $ec = 0;

sub path {
	return substr($_[0],0,1)."/".substr($_[0],1,1)."/".substr($_[0],2,1)."/$_[0]";
}

sub setglob {
	my @files = glob "$_[0]$_[1]";
	return unless @files == 1;
	$_ = substr $files[0], length $_[0],8;
	return $_;
}

my @remove;
my @add;
my @cmd;
while (<$upd>) {
	my @cmd = split;
	if ($cmd[0] eq "remove") {
		push @remove, $cmd[1];
	} elsif ($cmd[0] eq "add") {
		push @add, {md5=>$cmd[1], width=>$cmd[2], height=>$cmd[3]};
	} else {
		die "Unknown update command $cmd[0].\n";
	}
}

for (@remove) {
	push @cmd, "remove $dbid 0x".substr $_,0,8 and next if -e path($_).".jpg";
	push @cmd, "remove $dbid 0x".substr $_,0,8 and next if -e "todelete/$_.jpg";
	push @cmd, "remove $dbid 0x".substr $_,0,8 and next if -e "deleted/$_.jpg";
	push @cmd, "remove $dbid 0x$_" and next if setglob "xx/", "????????-$_.jpg";
	push @cmd, "remove $dbid 0x$_" and next if setglob "todelete/", "????????-$_.jpg";
	push @cmd, "remove $dbid 0x$_" and next if setglob "deleted/", "????????-$_.jpg";
	warn "Removed MD5 $_ not found.\n";
}

for (@add) {
	my @files = glob((path substr $_->{md5},0,8)."*.jpg");
	my $dup = 0;
	$dup = 1 if @files > 1;
	$dup = 2 if substr($files[0],6,32) ne $_->{md5};
	$dup = 3 if glob "xx/".substr($_->{md5},0,8)."*.jpg";
	if ($dup) {
		warn "New duplicate ID for MD5 $_->{md5}!\n";
		$ec = 1;
		next;
	}
	push @cmd, "add $dbid 0x".substr($_->{md5},0,8)." $_->{width} $_->{height}:$ENV{HOME}/doujin/$tag/$files[0]";
}

$SIG{PIPE} = 'IGNORE';
$|=1;
while (@cmd) {
	print "Opening connection for ", scalar @cmd, " commands...\n";
	open my $nc, "|-", "nc", "localhost", "5566" or die "Can't start nc: $!\n";
	select $nc; $|=1; select STDOUT;
	my $sent = 0;
	while ($sent < 16 and @cmd) {
		my $cmd = shift @cmd;
		print "$cmd\n";
		print $nc "$cmd\n";
		$sent++;
	}
	print $nc "done now\n";
	close $nc;
	die "Failed!\n" if $?;
	sleep 1 if @cmd;
}

die "Error code $ec\n" if $ec;
unlink "/usr/src/packages/sim/$tag.upd" or die "Can't unlink $tag.upd: $!\n";
print "Done!\n";
